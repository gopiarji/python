Here is a complete and detailed explanation of **Python Bitwise Operators**, including how they work and examples.

---

## ✅ What Are Bitwise Operators?

Bitwise operators operate directly on the **binary representation** of integers.
They perform operations at the **bit level**.

---

### ✅ 1️⃣ Bitwise AND `&`

Performs logical AND on each bit.

```python
a = 5   # 0b0101
b = 3   # 0b0011

result = a & b  # 0b0001 → 1
print(result)   # Output: 1
```

---

### ✅ 2️⃣ Bitwise OR `|`

Performs logical OR on each bit.

```python
a = 5   # 0b0101
b = 3   # 0b0011

result = a | b  # 0b0111 → 7
print(result)   # Output: 7
```

---

### ✅ 3️⃣ Bitwise XOR `^`

Performs logical XOR (exclusive OR).

```python
a = 5   # 0b0101
b = 3   # 0b0011

result = a ^ b  # 0b0110 → 6
print(result)   # Output: 6
```

---

### ✅ 4️⃣ Bitwise NOT `~`

Inverts all bits (one’s complement).

```python
a = 5   # 0b0000...0101

result = ~a    # -6 (because of two’s complement representation)
print(result)  # Output: -6
```

👉 Why `-6`?
Because in binary, `~5` becomes `-6` (one’s complement plus sign bit).

---

### ✅ 5️⃣ Left Shift `<<`

Shifts bits to the left, filling in zeros on the right.

```python
a = 5   # 0b0101

result = a << 1   # 0b1010 → 10
print(result)     # Output: 10

result = a << 2   # 0b10100 → 20
print(result)     # Output: 20
```

👉 Equivalent to multiplying by powers of 2:
`a << n` → `a * (2 ** n)`

---

### ✅ 6️⃣ Right Shift `>>`

Shifts bits to the right, dropping bits on the right.

```python
a = 5   # 0b0101

result = a >> 1   # 0b0010 → 2
print(result)     # Output: 2

result = a >> 2   # 0b0001 → 1
print(result)     # Output: 1
```

👉 Equivalent to integer division by powers of 2:
`a >> n` → `a // (2 ** n)`

---

## ✅ Example Putting It All Together

```python
a = 10   # 0b1010
b = 4    # 0b0100

print(f"a & b = {a & b}")    # 0b1010 & 0b0100 → 0b0000 → 0
print(f"a | b = {a | b}")    # 0b1010 | 0b0100 → 0b1110 → 14
print(f"a ^ b = {a ^ b}")    # 0b1010 ^ 0b0100 → 0b1110 → 14
print(f"~a = {~a}")          # ~10 → -11
print(f"a << 2 = {a << 2}")  # 10 << 2 → 40
print(f"a >> 1 = {a >> 1}")  # 10 >> 1 → 5
```

---

## ✅ When Are Bitwise Operators Useful?

* Low-level programming
* Embedded systems
* Cryptography
* Performance optimizations
* Manipulating flags

---

Would you like me to create practice exercises that let you try bitwise operations hands-on?
