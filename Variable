A **dictionary** in Python is a **built-in data type** used to store **key-value pairs**. It is an **unordered**, **mutable**, and **indexed collection**. Dictionaries are very useful when you want to associate unique keys with values and quickly retrieve, insert, or delete elements based on the key.

---

### ✅ Basic Syntax

```python
# Creating a dictionary
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York"
}

# Print the dictionary
print(my_dict)
```

---

### ✅ Key Characteristics

| Property       | Description                                                                                 |
| -------------- | ------------------------------------------------------------------------------------------- |
| Key-Value Pair | Each element is a key associated with a value: `"key": value`.                              |
| Mutable        | You can change the contents (add, update, delete keys).                                     |
| Unordered      | Prior to Python 3.7, dictionaries were unordered. From 3.7+, they preserve insertion order. |
| Indexed by Key | You access elements using the key, not by position.                                         |

---

### ✅ Accessing Elements

```python
print(my_dict["name"])  # Output: Alice
```

Or safely with `.get()` to avoid KeyError:

```python
print(my_dict.get("age"))  # Output: 25
print(my_dict.get("country", "Not Found"))  # Output: Not Found
```

---

### ✅ Adding or Updating Items

```python
# Adding a new key-value pair
my_dict["email"] = "alice@example.com"

# Updating an existing key
my_dict["age"] = 26
```

---

### ✅ Removing Items

```python
# Remove a key and return its value
removed_value = my_dict.pop("city")

# Remove the last inserted item
last_item = my_dict.popitem()

# Clear all items
my_dict.clear()
```

---

### ✅ Looping Through a Dictionary

```python
for key, value in my_dict.items():
    print(f"{key}: {value}")
```

---

### ✅ Example: Simple Dictionary

```python
person = {
    "name": "John",
    "age": 30,
    "city": "London"
}

# Access
print(person["name"])  # Output: John

# Add
person["job"] = "Engineer"

# Update
person["age"] = 31

# Delete
del person["city"]

# Loop
for key, value in person.items():
    print(f"{key}: {value}")
```

---

### ✅ When to Use a Dictionary?

* When you need **fast lookup by key** (O(1) time complexity).
* To store **structured data** like user profiles.
* For **mapping** relationships.

---

Let me know if you want to see more advanced topics:

* Nested dictionaries
* Dictionary comprehensions
* Useful dictionary methods

Let me know.
